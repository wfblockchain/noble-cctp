// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cctp/burn_message.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// *
// Message format for BurnMessages
// @param version the message body version
// @param burn_token the burn token address on source domain as bytes32
// @param mint_recipient the mint recipient address as bytes32
// @param amount the burn amount
// @param message_sender the message sender
type BurnMessage struct {
	Version       uint32                `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BurnToken     []byte                `protobuf:"bytes,2,opt,name=burn_token,json=burnToken,proto3" json:"burn_token,omitempty"`
	MintRecipient []byte                `protobuf:"bytes,3,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	Amount        cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	MessageSender []byte                `protobuf:"bytes,5,opt,name=message_sender,json=messageSender,proto3" json:"message_sender,omitempty"`
}

func (m *BurnMessage) Reset()         { *m = BurnMessage{} }
func (m *BurnMessage) String() string { return proto.CompactTextString(m) }
func (*BurnMessage) ProtoMessage()    {}
func (*BurnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_762f328c22117b0a, []int{0}
}
func (m *BurnMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnMessage.Merge(m, src)
}
func (m *BurnMessage) XXX_Size() int {
	return m.Size()
}
func (m *BurnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BurnMessage proto.InternalMessageInfo

func (m *BurnMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BurnMessage) GetBurnToken() []byte {
	if m != nil {
		return m.BurnToken
	}
	return nil
}

func (m *BurnMessage) GetMintRecipient() []byte {
	if m != nil {
		return m.MintRecipient
	}
	return nil
}

func (m *BurnMessage) GetMessageSender() []byte {
	if m != nil {
		return m.MessageSender
	}
	return nil
}

func init() {
	proto.RegisterType((*BurnMessage)(nil), "cctp.BurnMessage")
}

func init() { proto.RegisterFile("cctp/burn_message.proto", fileDescriptor_762f328c22117b0a) }

var fileDescriptor_762f328c22117b0a = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xef, 0x2b, 0x45, 0x35, 0x94, 0x21, 0x02, 0x61, 0x21, 0xd5, 0xad, 0x90, 0x90,
	0xba, 0x10, 0x0f, 0x88, 0x17, 0xe8, 0xd6, 0x81, 0x25, 0x30, 0xb1, 0x44, 0x89, 0x6b, 0x12, 0x2b,
	0xb5, 0x6f, 0x64, 0x3b, 0xfc, 0x79, 0x0b, 0x1e, 0xab, 0x12, 0x4b, 0x47, 0xc4, 0x50, 0xa1, 0xe4,
	0x45, 0x50, 0x9c, 0x76, 0xb2, 0xef, 0xef, 0x9c, 0x7b, 0x74, 0x75, 0xf0, 0x25, 0xe7, 0xae, 0x62,
	0x59, 0x6d, 0x74, 0xa2, 0x84, 0xb5, 0x69, 0x2e, 0xa2, 0xca, 0x80, 0x83, 0x70, 0xd0, 0x09, 0x57,
	0xe7, 0x39, 0xe4, 0xe0, 0x01, 0xeb, 0x7e, 0xbd, 0x76, 0xfd, 0x85, 0xf0, 0xc9, 0xa2, 0x36, 0xfa,
	0xa1, 0xdf, 0x08, 0x09, 0x3e, 0x7e, 0x15, 0xc6, 0x4a, 0xd0, 0x04, 0xcd, 0xd0, 0x7c, 0x1c, 0x1f,
	0xc6, 0x70, 0x82, 0xb1, 0xcf, 0x76, 0x50, 0x0a, 0x4d, 0xfe, 0xcd, 0xd0, 0xfc, 0x34, 0x1e, 0x75,
	0xe4, 0xa9, 0x03, 0xe1, 0x0d, 0x3e, 0x53, 0x52, 0xbb, 0xc4, 0x08, 0x2e, 0x2b, 0x29, 0xb4, 0x23,
	0xff, 0xbd, 0x65, 0xdc, 0xd1, 0xf8, 0x00, 0xc3, 0x7b, 0x3c, 0x4c, 0x15, 0xd4, 0xda, 0x91, 0xc1,
	0x0c, 0xcd, 0x47, 0x8b, 0xc9, 0x66, 0x37, 0x0d, 0x7e, 0x76, 0xd3, 0x0b, 0x0e, 0x56, 0x81, 0xb5,
	0xab, 0x32, 0x92, 0xc0, 0x54, 0xea, 0x8a, 0x68, 0xa9, 0x5d, 0xbc, 0x37, 0xfb, 0xf4, 0xfe, 0xc2,
	0xc4, 0x0a, 0xbd, 0x12, 0x86, 0x1c, 0xed, 0xd3, 0x7b, 0xfa, 0xe8, 0xe1, 0x62, 0xb9, 0x69, 0x28,
	0xda, 0x36, 0x14, 0xfd, 0x36, 0x14, 0x7d, 0xb6, 0x34, 0xd8, 0xb6, 0x34, 0xf8, 0x6e, 0x69, 0xf0,
	0xcc, 0x72, 0xe9, 0x8a, 0x3a, 0x8b, 0x38, 0x28, 0xf6, 0xf6, 0x92, 0xad, 0x81, 0x97, 0xbc, 0x48,
	0xa5, 0x66, 0x1a, 0xb2, 0xb5, 0xb8, 0xf5, 0xd5, 0xbd, 0x33, 0xff, 0xb8, 0x8f, 0x4a, 0xd8, 0x6c,
	0xe8, 0xfb, 0xb9, 0xfb, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xe1, 0xf5, 0xcf, 0x56, 0x01, 0x00,
	0x00,
}

func (m *BurnMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageSender) > 0 {
		i -= len(m.MessageSender)
		copy(dAtA[i:], m.MessageSender)
		i = encodeVarintBurnMessage(dAtA, i, uint64(len(m.MessageSender)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBurnMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintBurnMessage(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BurnToken) > 0 {
		i -= len(m.BurnToken)
		copy(dAtA[i:], m.BurnToken)
		i = encodeVarintBurnMessage(dAtA, i, uint64(len(m.BurnToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintBurnMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBurnMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovBurnMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BurnMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBurnMessage(uint64(m.Version))
	}
	l = len(m.BurnToken)
	if l > 0 {
		n += 1 + l + sovBurnMessage(uint64(l))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovBurnMessage(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBurnMessage(uint64(l))
	l = len(m.MessageSender)
	if l > 0 {
		n += 1 + l + sovBurnMessage(uint64(l))
	}
	return n
}

func sovBurnMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBurnMessage(x uint64) (n int) {
	return sovBurnMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BurnMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBurnMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurnMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurnMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBurnMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBurnMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnToken = append(m.BurnToken[:0], dAtA[iNdEx:postIndex]...)
			if m.BurnToken == nil {
				m.BurnToken = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurnMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBurnMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBurnMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = append(m.MintRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.MintRecipient == nil {
				m.MintRecipient = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurnMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBurnMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBurnMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBurnMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBurnMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBurnMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageSender = append(m.MessageSender[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageSender == nil {
				m.MessageSender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBurnMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBurnMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBurnMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBurnMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBurnMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBurnMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBurnMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBurnMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBurnMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBurnMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBurnMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBurnMessage = fmt.Errorf("proto: unexpected end of group")
)
